<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bestie</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tangkunhou.com/"/>
  <updated>2016-10-08T15:00:17.616Z</updated>
  <id>https://tangkunhou.com/</id>
  
  <author>
    <name>Bestie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何将hexo部署到vps上</title>
    <link href="https://tangkunhou.com/2016/10/%E5%A6%82%E4%BD%95%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0vps%E4%B8%8A/"/>
    <id>https://tangkunhou.com/2016/10/如何将hexo部署到vps上/</id>
    <published>2016-10-08T13:23:32.000Z</published>
    <updated>2016-10-08T15:00:17.616Z</updated>
    
    <content type="html"><![CDATA[<p>之前已经将hexo部署到了GitHub Pages上，可是由于众所周知的原因，GitHub Pages在国内的可访问性并不是很好，所以怎么让国内也能顺畅的访问是一个有必要考虑的问题。好在国内也有类似的代码托管服务，我知道的有</p>
<ul>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">Git.OSC</a> 开源中国提供的代码托管平台</li>
<li><a href="https://coding.net/" target="_blank" rel="external">Coding</a> 一个比较全面的云端软件服务平台</li>
<li><del><a href="http://gitcafe.com" target="_blank" rel="external">GitCafe</a> 和Coding比较类似</del> 更新：已经被Coding收购</li>
</ul>
<p>部署的方法和部署到Github Pages上比较类似，使用各个平台提供的Pages服务即可，大多也支持绑定域名，之后将自己的域名分区域解析便能使得国内国外都能流畅的访问了。</p>
<p>除了使用国内的Git服务之外，还有一种办法便是将代码部署在自己的服务器上，前段时间在阿里云上申请了<code>9.9元</code>每月的学生机，正好拿来用。<br>hexo提供多种部署方式，包括<code>Git</code> <code>Heroku</code> <code>Rsync</code> <code>FTPSync</code>等，甚至你直接将<code>public</code>文件夹里的文件复制到网站根目录也是没问题的，我这里使用<code>Git</code>比较方便。</p>
<ul>
<li><p>首先需要的当然是一个网站服务器了，配置静态文件服务器非常简单，我这里使用最新版本的<code>nginx</code><br>(服务器系统版本Ubuntu server 14.04, 权限问题可能需要sudo)</p>
<ul>
<li><p>添加key</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/keys/nginx_signing.key</div><div class="line">apt-key add nginx_signing.key</div></pre></td></tr></table></figure>
</li>
<li><p>在sources.list文件下添加源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx</div><div class="line">deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx</div></pre></td></tr></table></figure>
</li>
<li><p>使用apt安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install nginx</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>安装好<code>nginx</code>之后，在任意位置创建网站根目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var</div><div class="line">mkdir www</div></pre></td></tr></table></figure>
</li>
<li><p>配置<code>nginx</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/nginx/conf.d/</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到其中已经有一个<code>default.conf</code>，如果没有别的需求修改这个默认配置就可以，关键部分如下<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">server</span> &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    server_name  abc.com; <span class="meta">#abc.com修改为你的域名</span></div><div class="line"></div><div class="line">    <span class="meta">#charset koi8-r;</span></div><div class="line">    <span class="meta">#access_log  /var/log/nginx/log/host.access.log  main;</span></div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /var/www; <span class="meta">#/var/www 修改为你的网站根目录，需要有读权限</span></div><div class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure></p>
<p>保存之后重新加载配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx reload</div></pre></td></tr></table></figure></p>
<p>此时nginx就配置完成了。</p>
<ul>
<li>现在需要将代码部署到服务器上，在服务器上安装<code>Git</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install git</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在任意位置建立一个<a href="http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/" target="_blank" rel="external">裸仓库(bare repositories)</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init repo.git --bare</div></pre></td></tr></table></figure></p>
<p>同时配置<code>Githook</code>来自动将仓库内的文件pull到网站根目录<br>切换到仓库目录下的<code>hooks</code>文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim post-receive</div></pre></td></tr></table></figure></p>
<p>修改内容如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">unset</span> GIT_DIR</div><div class="line">NowPath=`<span class="built_in">pwd</span>`</div><div class="line">DeployPath=<span class="string">"/var/www/"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$DeployPath</span></div><div class="line">git pull origin master</div><div class="line"><span class="built_in">cd</span> <span class="variable">$NowPath</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure></p>
<p>保存退出修改脚本权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure></p>
<p>服务器配置便完成了。</p>
<ul>
<li><p>修改<code>hexo</code>的<code>_config.yml</code></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  - <span class="attribute">type</span>: git</div><div class="line">  	<span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git</div><div class="line">  	<span class="attribute">branch</span>: master</div><div class="line">  - <span class="attribute">type</span>: git</div><div class="line">  	<span class="attribute">repository</span>: user<span class="variable">@yourserverip</span>:/home/user/repo.git</div><div class="line">  	<span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</li>
<li><p>将你的域名解析到服务器上</p>
</li>
<li>done~</li>
</ul>
<p>这样，便把hexo部署到了阿里云服务器上，国内访问速度显著提升，当然，这样需要域名备案，各有利弊把。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已经将hexo部署到了GitHub Pages上，可是由于众所周知的原因，GitHub Pages在国内的可访问性并不是很好，所以怎么让国内也能顺畅的访问是一个有必要考虑的问题。好在国内也有类似的代码托管服务，我知道的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;ht
    
    </summary>
    
      <category term="运维" scheme="https://tangkunhou.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="vps, linux, git, hexo" scheme="https://tangkunhou.com/tags/vps-linux-git-hexo/"/>
    
  </entry>
  
  <entry>
    <title>在WPF中使用WPF.MDI建立多文档程序</title>
    <link href="https://tangkunhou.com/2016/04/%E8%A7%A3%E5%86%B3%E5%9C%A8WPF-MDI%E4%B8%AD%E4%BD%BF%E7%94%A8UserControl%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8%E7%88%B6%E5%85%83%E7%B4%A0%E6%8E%A7%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tangkunhou.com/2016/04/解决在WPF-MDI中使用UserControl自定义样式无法调用父元素控件的问题/</id>
    <published>2016-04-22T10:17:19.000Z</published>
    <updated>2016-10-08T12:46:03.799Z</updated>
    
    <content type="html"><![CDATA[<p>在WPF中已经没有了MDI (Multiple Document Interface) ，取而代之的是TabControl，但是使用MDI的需求还是存在，所幸有一个开源项目<a href="http://wpfmdi.codeplex.com" target="_blank" rel="external">WPF.MDI</a>给WPF提供了MDI控件。使用方法如下：</p>
<ol>
<li>将WPF.MDI.dll下载到本地并在Visual Studio中添加引用。</li>
<li>在xaml文件顶部添加<code>xmlns:mdi=&quot;clr-namespace:WPF.MDI;assembly=WPF.MDI&quot;</code>，cs文件中添加<code>using WPF.MDI;</code>。</li>
<li>在xaml中使用<code>&lt;mdi:MdiContainer&gt;</code>建立容器窗口，使用<code>&lt;mdi:MdiChild&gt;</code>建立子窗口，使用<code>Name=&quot;xxx&quot;</code>以便在cs文件中调用。</li>
<li>或者直接在cs文件中使用,其中<code>Container</code>是<code>MdiContainer</code>的<code>Name</code>。</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Container.Children.Add(<span class="keyword">new</span> MdiChild</div><div class="line">   &#123;</div><div class="line">     Title = <span class="string">"Window Using Code"</span>,</div><div class="line">     Content = <span class="keyword">new</span> ExampleControl(),</div><div class="line">     Width = <span class="number">214</span>,</div><div class="line">     Height = <span class="number">334</span>,</div><div class="line">     Position = <span class="keyword">new</span> Point(<span class="number">200</span>, <span class="number">30</span>)</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>更详细的用法可以在<a href="http://wpfmdi.codeplex.com" target="_blank" rel="external">WPF.MDI</a>主页上查看，下载时可以选择下载example以了解更详细的用法。<br><a id="more"></a><br>我的C#课需要做一个简单的学生信息管理系统，添加信息的界面如下<br><img src="/image/cs_WPF.MDI.png" alt="学生信息管理系统"></p>
<ol>
<li>点击添加用户信息打开添加用户信息子窗口。</li>
<li>在子窗口中点击取消或者点击右上角的×关闭子窗口。</li>
</ol>
<p>如何使用自定义样式来定义<code>MdiChild()</code> 呢？在<code>MdiChild{}</code>中的Content属性是一个<code>UIElement</code>对象，在这里我新建一个<code>UserControl</code>命名为<code>AddUserWindow</code>，在<code>MainWindow</code>中新建一个方法命名为<code>openAddWindow()</code>并绑定到Menu菜单中的button上。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainWindow</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openAddUser</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">  Title = <span class="string">"添加用户信息"</span>,</div><div class="line">  Width = <span class="number">420</span>,</div><div class="line">  Height = <span class="number">360</span>,</div><div class="line">  Content = <span class="keyword">new</span> AddUserWindow()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后打开<code>AddUserWindow</code>类，给其中的按钮绑定上事件处理方法，这时我发现，<code>this</code>中没有关闭窗口的方法，仔细一想，按钮所在的对象是一个<code>UserControl</code>，想要关闭当前子窗口的话必须要调用父元素也就是<code>MdiChild</code>的<code>Close()</code>方法，那么如何获得父元素对象呢？搜索了一番，有说在<code>TreeView</code>中遍历出父元素的，有说用委托的，我都试了试发现并不好用，突然想到，我把父对象当作参数传进来不就行了么。便把代码改成了这个样子<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainWindow</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openAddUserWindow</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">  MdiChild childAddUser = <span class="keyword">new</span> MdiChild &#123; &#125;;</div><div class="line">  AddUserWindow add = <span class="keyword">new</span> AddUserWindow(childAddUser);</div><div class="line">  childAddUser.Content = add;</div><div class="line">  childAddUser.Title = <span class="string">"添加用户信息"</span>;</div><div class="line">  container.Children.Add(childAddUser);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AddUserWindow</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AddUserWindow</span>(<span class="params">MdiChild parent</span>)</span></div><div class="line">&#123;</div><div class="line">  InitializeComponent();</div><div class="line">  <span class="keyword">this</span>.parent = parent;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addUserCancel_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">  parent.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就这样，点击取消按钮便能调用到父元素也就是<code>MdiChild</code>的<code>Close()</code>方法了，希望能帮助到遇到同样问题的同学。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在WPF中已经没有了MDI (Multiple Document Interface) ，取而代之的是TabControl，但是使用MDI的需求还是存在，所幸有一个开源项目&lt;a href=&quot;http://wpfmdi.codeplex.com&quot;&gt;WPF.MDI&lt;/a&gt;给WPF提供了MDI控件。使用方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将WPF.MDI.dll下载到本地并在Visual Studio中添加引用。&lt;/li&gt;
&lt;li&gt;在xaml文件顶部添加&lt;code&gt;xmlns:mdi=&amp;quot;clr-namespace:WPF.MDI;assembly=WPF.MDI&amp;quot;&lt;/code&gt;，cs文件中添加&lt;code&gt;using WPF.MDI;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在xaml中使用&lt;code&gt;&amp;lt;mdi:MdiContainer&amp;gt;&lt;/code&gt;建立容器窗口，使用&lt;code&gt;&amp;lt;mdi:MdiChild&amp;gt;&lt;/code&gt;建立子窗口，使用&lt;code&gt;Name=&amp;quot;xxx&amp;quot;&lt;/code&gt;以便在cs文件中调用。&lt;/li&gt;
&lt;li&gt;或者直接在cs文件中使用,其中&lt;code&gt;Container&lt;/code&gt;是&lt;code&gt;MdiContainer&lt;/code&gt;的&lt;code&gt;Name&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Container.Children.Add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MdiChild&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Title = &lt;span class=&quot;string&quot;&gt;&quot;Window Using Code&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Content = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ExampleControl(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Width = &lt;span class=&quot;number&quot;&gt;214&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Height = &lt;span class=&quot;number&quot;&gt;334&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Position = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Point(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更详细的用法可以在&lt;a href=&quot;http://wpfmdi.codeplex.com&quot;&gt;WPF.MDI&lt;/a&gt;主页上查看，下载时可以选择下载example以了解更详细的用法。&lt;br&gt;
    
    </summary>
    
      <category term="C#" scheme="https://tangkunhou.com/categories/C/"/>
    
    
      <category term="学习" scheme="https://tangkunhou.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C#" scheme="https://tangkunhou.com/tags/C/"/>
    
      <category term="WPF" scheme="https://tangkunhou.com/tags/WPF/"/>
    
      <category term="WPF.MDI" scheme="https://tangkunhou.com/tags/WPF-MDI/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo作为博客系统</title>
    <link href="https://tangkunhou.com/2015/11/%E4%BD%BF%E7%94%A8hexo%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0vps%E4%B8%8A/"/>
    <id>https://tangkunhou.com/2015/11/使用hexo作为博客系统以及将hexo部署到vps上/</id>
    <published>2015-11-06T05:50:59.000Z</published>
    <updated>2016-10-06T14:47:28.833Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个计算机专业的学生，有一个属于自己的个人博客是很重要的，无论是生活趣事，还是学习总结，都能够记录下来。供自己回忆的同时也能将自己的见闻分享给他人，何乐而不为。<br>现在建博客的方式有很多，首先最简单的便是各个网站提供的博客服务了，偏生活一些的，比如写一些生活趣事，可以选择各大传统门户网站的服务：</p>
<ul>
<li><a href="http://blog.163.com/" target="_blank" rel="external">网易博客</a></li>
<li><a href="http://blog.sina.com.cn/" target="_blank" rel="external">新浪博客</a></li>
<li><a href="http://blog.sohu.com/" target="_blank" rel="external">搜狐博客</a></li>
</ul>
<p>如果是偏科技一些的呢，比如写一些技术类文章，那么可以选择科技门户的服务：</p>
<ul>
<li><a href="http://blog.csdn.net/" target="_blank" rel="external">CSDN博客频道</a></li>
<li><a href="https://www.oschina.net/blog" target="_blank" rel="external">开源中国博客专区</a></li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a></li>
<li><a href="https://segmentfault.com/blogs" target="_blank" rel="external">segmentfault</a></li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a></li>
</ul>
<p>其中<a href="https://www.oschina.net/blog" target="_blank" rel="external">开源中国博客专区</a>、<a href="https://segmentfault.com/blogs" target="_blank" rel="external">segmentfault</a>和<a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>的编辑器是支持markdown语法的，个人觉得非常好用。<br>但是使用这些博客服务有很多限制，比如会有一些服务商的广告，同时对于博客的样式无法进行很大的修改，只能使用默认提供的有限的主题等。</p>
<a id="more"></a>
<p>解除这些限制的一个办法就是自己搭建博客网站，同样的，选择也有很多，比如</p>
<ul>
<li><a href="https://cn.wordpress.org/" target="_blank" rel="external">WordPress</a><br>WordPress是目前互联网上最流行的博客系统，使用人数众多，你能找到非常多的教程、主题、插件，但是正因为如此，显得十分臃肿。</li>
<li><a href="http://www.rainbowsoft.org" target="_blank" rel="external">Z-Blog</a><br>支持asp也许是最大的优点了，本人没有使用过。</li>
<li><a href="http://typecho.org/" target="_blank" rel="external">Typecho</a><br>轻量高效，运行速度很快，在使用上与WordPress基本没有差别，缺点是没有那么丰富的第三方资源。</li>
<li><a href="https://ghost.org/" target="_blank" rel="external">ghost</a><br>ghost是基于Node.js的博客系统，也是一个非常纯粹的写作平台，对于前端朋友们可能更加友好，缺点是目前支持Node.js的空间比较少，需要一个个人主机。</li>
</ul>
<p>自建博客相比使用博客服务更加自由，你可以自由的修改博客的样式，自由的加上你想要的东西，不过需要更多的精力去维护自己的网站和服务器。同时还要担心服务器受攻击的问题，有利也有弊吧。</p>
<p>如果你想要自建博客的自由性，又不想要维护服务器的繁琐，那么还有一个选择，那就是使用<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>将你的静态网页托管到GitHub的服务器上，自由修改博客的样式同时免于担心服务器的问题。<br>但是这种方式比较繁琐，适用于比较了解GitHub的同学。</p>
<ul>
<li>首先你需要一个GitHub账号，没有的话可以注册一个<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，配置可以参考<a href="https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE" target="_blank" rel="external">这个链接</a>。</li>
<li>建立一个repository，命名为<em>username</em>.github.io，其中<em>username</em>是你GitHub的<em>username</em>，<strong>不是Name</strong>。</li>
<li>Clone这个repository到本地<code>git clone https://github.com/*username*/*username*.github.io.git</code>。</li>
<li>在这个本地repository里写入一个<code>index.html</code>，例如<code>echo &quot;Hello World&quot; &gt; index.html</code>。</li>
<li><p>Push到远端repository</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add -all</div><div class="line">git commit -m <span class="string">"Initial commit"</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器，输入<em>username</em>.github.io便可以看到你刚刚写到<code>index.html</code>里的<code>Hello World</code>了。</p>
</li>
</ul>
<p>但是这样手工写html还是很麻烦的，特别是要当作博客来用的话。使用一个工具来生成网页还是很有必要的，目前比较流行的有两个</p>
<ul>
<li><a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a><br>Jekyll是一个基于Ruby的静态博客生成器，可以很方便的生成博客的结构，熟悉Ruby的同学可以尝试一下，不多说。</li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a><br>hexo同样是一个静态博客生成器，不过是基于Node.js，对于熟悉js的同学来说会更方便一些，我选择的就是hexo。</li>
</ul>
<p>下面说说怎么安装及使用hexo</p>
<ul>
<li><p>hexo基于Node.js，所以首先要安装Node.js，使用Windows的同学直接在<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">Node.js官网</a>下载Windows版本的安装包就可以，推荐安装4.x的LTS版本。使用Linux的同学可以使用包管理器安装，对于Ubuntu/Debian来说执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>L https://deb.nodesource.com/setup_4.x | sudo -E bash -</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure>
<p>其他发行版的同学可以自行查看官网的<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">下载指南</a>。</p>
</li>
<li><p>然后安装hexo，打开命令行或者GitBash，输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>如果是Linux或许有权限问题，使用<code>sudo</code>。</p>
</li>
<li><p>之后便可以使用<code>hexo</code>命令来初始化一个博客了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>其中blog是文件夹的名字，可以根据自己的偏好输入。</p>
</li>
<li>打开浏览器，输入<code>http://127.0.0.1:4000</code>便可以看到一个崭新的博客了。</li>
<li><p>打开blog文件夹，打开其中名为<code>_config.yml</code>的文件，可以看到其中有很多配置项，详细的配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">官网的说明</a>,这里我说一下怎么部署到GitHub上。</p>
<ul>
<li><code>_config.yml</code>文件的最下方有一个<code>deploy</code>，按照如下格式填好<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">- type:</span> git</div><div class="line"><span class="attr">  repository:</span> git@github.com:username/username.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>username</em>是你GitHub的用户名</p>
<ul>
<li>在blog文件夹中打开命令行，输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果出现<code>INFO Deploy done: git</code>则说明部署已经成功了。</p>
</li>
<li>打开<code>username.github.io</code>，可以发现你的博客已经可以访问了，如果还没有更新的话可能需要等待一会。</li>
</ul>
<p>成功的建立了自己的个人博客还只是第一步，之后可以自己寻找一个漂亮的主题或者自己设计一个漂亮的主题。亦或者是写自己的第一篇文章，将自己博客的地址告诉其他人。先到这里，以后再做更细节的优化吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个计算机专业的学生，有一个属于自己的个人博客是很重要的，无论是生活趣事，还是学习总结，都能够记录下来。供自己回忆的同时也能将自己的见闻分享给他人，何乐而不为。&lt;br&gt;现在建博客的方式有很多，首先最简单的便是各个网站提供的博客服务了，偏生活一些的，比如写一些生活趣事，可以选择各大传统门户网站的服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.163.com/&quot;&gt;网易博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/&quot;&gt;新浪博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sohu.com/&quot;&gt;搜狐博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是偏科技一些的呢，比如写一些技术类文章，那么可以选择科技门户的服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/&quot;&gt;CSDN博客频道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oschina.net/blog&quot;&gt;开源中国博客专区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/&quot;&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/blogs&quot;&gt;segmentfault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/&quot;&gt;简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;a href=&quot;https://www.oschina.net/blog&quot;&gt;开源中国博客专区&lt;/a&gt;、&lt;a href=&quot;https://segmentfault.com/blogs&quot;&gt;segmentfault&lt;/a&gt;和&lt;a href=&quot;http://www.jianshu.com/&quot;&gt;简书&lt;/a&gt;的编辑器是支持markdown语法的，个人觉得非常好用。&lt;br&gt;但是使用这些博客服务有很多限制，比如会有一些服务商的广告，同时对于博客的样式无法进行很大的修改，只能使用默认提供的有限的主题等。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://tangkunhou.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="hexo" scheme="https://tangkunhou.com/tags/hexo/"/>
    
      <category term="git" scheme="https://tangkunhou.com/tags/git/"/>
    
      <category term="vps" scheme="https://tangkunhou.com/tags/vps/"/>
    
      <category term="linux" scheme="https://tangkunhou.com/tags/linux/"/>
    
      <category term="学习" scheme="https://tangkunhou.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
